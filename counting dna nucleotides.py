def countnucfreq(seq):
    dnadict = {"A": 0, "C": 0, "G": 0, "T": 0}
    for nuc in seq:
        dnadict[nuc] += 1
    return dnadict


# strings = "TACTAGTATATTAACGCTAGTCTTCGTAATACCAGCTTCTGATTCTACATGGGCAGCCGAGTTACGACGGCTACACGGCGGGTACGGCAAAAACCGTTTAATTTCACTGCGAGACACTCGCTCTTCTGACTAGTTAGGGTTTTTTGAGCATACCCAACTGGAAGACTTATAGAAAGGAACGCGTTAGTCAAAAGAGGCTCCCCATTGGGGTTGCGCTCAGCTCTGAACGCACCAGACCTTACACATACAGAACGGGTGAAGCTCCTCCTGGTGCAACTAACGGGTCTGGTTGTTTCTAGCGTGTGGGAATGCTCGCGCTAGCATTAAGAACATGACACCCCCAGCTGTACGCTCGAGCGAGGTGTCAACTTTGTGACTGTTATGTATCTTCGTGGATTTTCTGCTAAATCGTAGCCAGTTCCAGTAATCAGGACTGGTCGCCAAACACACCATTTAACCCCCGACCTCAAAGTGGCCATCAAATATAAGGTCGAATACCTAAGTACCGATTGTAATCCTACATCCTCCAGATTATGCGAACACTGGGATCACACGGACTCAGCTGATCCGAGAAATCCTAACTCCCCTGGTGCAAATTGAGTCGACCACACGACAGAAGAGATCCACTTTCTTGGATACTTGGTGACAGCAGGCCTGGATAATCAGCAATGGCCAGTCTCTGACACTAATTGATCTAGACCCTCTCGGGCCGGAGTGATTTAGAGGAGTTGCCTCCTGCTAGACCTAATCACACTTCTGTATTCTGTATTCTCAGGTTGGATTCAGATTACCCCGGGTACGCCACTACCTTGCAAGAAACACCAGACGCATGTCTTCAATGCAAAAGCGTAGTAAAGGTGTCTGATTGTTGTATCTAAAATAGATCATGATCGGCGCAGAGGCTATCATTCCTCGACA"

strings = "ATGCATGC"
result = countnucfreq(strings)

print(' '.join([str(val) for key, val in result.items()]))


# dna complementary strand

def complement(seq):
    new_dict = {"A": "T", "C": "G"}
    empty_str = ''
    for nuc in seq:
        for key, value in new_dict.items():
            if nuc == key:
                empty_str += value
            elif nuc == value:
                empty_str += key
    return empty_str


print(f'[2] + complementary : {(complement(strings))}')

# dna reverse complementary strand
print(f'[3] + reverse complementary : {(complement(strings))[::-1]}')

## another method for reverse complementary

dna_reversecomplementary = {"A": "T", "T": "A", "G": "C", "C": "G"}


def reverse_complemment(seq):
    return ''.join([dna_reversecomplementary[nuc] for nuc in seq])[::-1]


print(f' [4] + reverse complement : {(reverse_complemment("TATACATGGAACTGCACATTTTAGCTTACACAGGAGGCTACAGCGCGCCATGTGCACGCCGCGTATTCCCCTTCGTTCAAACGGGCCTTCACTCATAGCTAAGCGCTCCGGAGGGATAGCGATCTGCCCTGGTGATCGTATCATTCGCTCTGAACAATTTAACTGTGCATCGCCTAACCTCAACCCATAAGAAGAACGAATTCACTGCCTTGTCAAGGGAGCGATTTTTGCACGTGGCGGTGGTAGACTGTAATACGGTGAAGAGCGTATCTAAGAATTCACCTAGCTGTCCTGATTTTACACTACTCTGCCACAGTGTCTTACATGCTCGCAGGAGCTTCGTCAATCTGCCACTGGGAGCCCTGCATACACAATATCCTAGCATCAATGATCAGGTGGTTACCACTGGTACCCGGCAAAGACCCCAAGCCCCGACGACAGGATCAAACCCGGCCCGGGGCCTTCTCTATTGGGCCAAAATTAGCTGATTGAATTACAGAGTAACTGGATCGGTCATGCGATAGTTTAACTTAGGATTCCGCTCTGAGGTTAACTGGTGGTCAAATTTGCCTCATGCGGTATGTCATCCTGCTTTTTTCGTAGCGTAAACTGTCCCGAACATGCCCGGAGGAGTCCGTGTGCGGGTGGTTATGATGACCCCGCAAATGAGAGCCAGTGTAATTGATGAAGCATCATCGCTACGCGAATCATCCATTTAAGTGTGTACCGTCCAGCTGGCCTTCAATCCGTTCGGAGACGATAAGTCAGTTGAACTCGTTTCTCCACCGTTTGATTGTTGGTTATTCTACCATGCTGTCTTACCGGTCGCTATTACGATGGGATCGGCATGCTGGAATCGTATGCGGTTATCTCTATATACCAACACGCCTCTTGGTTGCGGGTGATTACGGATTGGGCCTGTTCGGAATTACAACGACCGAAGAGTCCTAACTTGGTTGCAGTTATCA"))}')



##  grafical representation
print(f"[5] + strings + complementary : \n5' {strings} 3'")
print(f"   {''.join(['|' for c in range(len(strings))])}")
print(f"3' {complement(strings)} 5'")
print(f"   {''.join(['>' for c in range(len(strings))])}")
print(f"5' {reverse_complemment(strings)} 3'\n")

